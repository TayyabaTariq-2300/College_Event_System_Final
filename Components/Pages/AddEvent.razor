@page "/admindashboard/add-event"
@inject AppDbContext _context
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

<h2>Add New Event</h2>

<EditForm Model="@NewEvent" OnValidSubmit="HandleAddEvent" FormName="AddEvent">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Title:</label>
        <InputText class="form-control" @bind-Value="NewEvent.Title" />
    </div>

    <div class="mb-3">
        <label>Description:</label>
        <InputTextArea class="form-control" @bind-Value="NewEvent.Description" />
    </div>

    <div class="mb-3">
        <label>Date:</label>
        <InputDate class="form-control" @bind-Value="NewEvent.Date" />
    </div>

    <div class="mb-3">
        <label>Time:</label>
        <InputText class="form-control" @bind-Value="NewEvent.Time" />
    </div>

    <div class="mb-3">
        <label>Location:</label>
        <InputText class="form-control" @bind-Value="NewEvent.Location" />
    </div>

    <button type="submit" class="btn-add-event">Add Event</button>
</EditForm>

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="alert alert-success">@SuccessMessage</div>
}

@code {
    private Event NewEvent { get; set; } = new();
    public string? SuccessMessage { get; set; }

    private async Task HandleAddEvent()
    {
        NewEvent.CreatedBy = "Admin"; // Set event creator
        if (string.IsNullOrWhiteSpace(NewEvent.Description))
        {
            NewEvent.Description = "Default description"; // Provide a fallback value
        }

        _context.Events.Add(NewEvent);
        await _context.SaveChangesAsync();

        SuccessMessage = "Event added successfully!";
        NewEvent = new(); // Reset form
    }
}
