@page "/studentdashboard/feedback"
@inject AppDbContext _context
@using Microsoft.EntityFrameworkCore
@namespace College_Event_System_Final.Models
<h2>Give Feedback</h2>

<EditForm Model="@NewFeedback" OnValidSubmit="HandleSubmitFeedback">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Select Event:</label>
        @if (Events == null || !Events.Any())
        {
            <p>No events found.</p>
        }
        else
        {
            <InputSelect class="form-control" @bind-Value="NewFeedback.EventID" TValue="int">
                <option disabled selected>Choose an event</option>
                @foreach (var eventItem in Events)
                {
                    <option value="@eventItem.EventID">@eventItem.Title</option>
                }
            </InputSelect>
        }
    </div>

    <div class="mb-3">
        <label>Rating (1-5):</label>
        <InputNumber class="form-control" @bind-Value="NewFeedback.Rating" TValue="int" Min="1" Max="5" />
    </div>

    <div class="mb-3">
        <label>Comments:</label>
        <InputTextArea class="form-control" @bind-Value="NewFeedback.Comments" />
    </div>

    <button type="submit" class="btn-feedback">Submit Feedback</button>
</EditForm>

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="alert alert-success">@SuccessMessage</div>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

@code {
    private Feedback NewFeedback { get; set; } = new();
    private List<Event>? Events;
    public string? SuccessMessage { get; set; }
    public string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Events = await _context.Events.AsNoTracking().ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching events: {ex.Message}");
            ErrorMessage = $"Error loading events: {ex.Message}";
        }
    }

    private async Task HandleSubmitFeedback()
    {
        try
        {
            if (NewFeedback.EventID == 0)
            {
                ErrorMessage = "Please select an event!";
                return;
            }

            if (NewFeedback.Rating < 1 || NewFeedback.Rating > 5)
            {
                ErrorMessage = "Rating must be between 1 and 5!";
                return;
            }

            if (string.IsNullOrWhiteSpace(NewFeedback.Comments))
            {
                ErrorMessage = "Please provide feedback!";
                return;
            }

            _context.Feedbacks.Add(NewFeedback);
            await _context.SaveChangesAsync();

            SuccessMessage = "Feedback submitted successfully!";
            NewFeedback = new(); // Reset form after submission
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Database Save Error: {ex.Message}");
            ErrorMessage = $"An error occurred while submitting feedback: {ex.Message}";
        }
    }
}
