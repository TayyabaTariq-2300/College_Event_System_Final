@page "/studentdashboard/feedback"
@inject College_Event_System_Final.Models.AppDbContext _context
@inject NavigationManager NavigationManager
@inject College_Event_System_Final.Services.UserSessionService UserSession
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@namespace College_Event_System_Final.Models

@using System.ComponentModel.DataAnnotations;


<h3>Feedback</h3>

@if (!isLoaded)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="feedbackModel" OnValidSubmit="HandleValidSubmit" FormName="FeedbackForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="eventSelect" class="form-label">Event</label>
            <select id="eventSelect" class="form-select" @bind="feedbackModel.EventID" required>
                <option value="">Select an event</option>
                @foreach (var ev in events)
                {
                    <option value="@ev.EventID">@ev.Title</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label for="rating" class="form-label">Rating (1-5)</label>
            <input type="number" id="rating" class="form-control" @bind="feedbackModel.Rating" min="1" max="5" required />
        </div>

        <div class="mb-3">
            <label for="comments" class="form-label">Comments</label>
            <textarea id="comments" class="form-control" @bind="feedbackModel.Comments" rows="4"></textarea>
        </div>

        <button type="submit" class="btn btn-primary">Submit Feedback</button>

        @if (successMessage != null)
        {
            <div class="alert alert-success mt-3">@successMessage</div>
        }
    </EditForm>
}

@code {
    private Feedback feedbackModel = new Feedback();
    private List<Event> events = new();
    private string? successMessage;
    private bool isLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        // Make sure user is logged in
        if (string.IsNullOrEmpty(UserSession.UserID))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        // Load events from DB to populate dropdown
        events = await _context.Events.ToListAsync();

        isLoaded = true;
    }

    private async Task HandleValidSubmit()
    {
        // Assign the current logged in UserID to feedback
        feedbackModel.UserID = int.Parse(UserSession.UserID!);

        _context.Feedbacks.Add(feedbackModel);
        await _context.SaveChangesAsync();

        successMessage = "Thank you for your feedback!";

        // Reset form
        feedbackModel = new Feedback();
        StateHasChanged();
    }
}
